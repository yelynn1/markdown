{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","editorRef","useRef","initialValue","useState","markdown","setMarkdown","textToCopy","setTextToCopy","copied","setCopied","nhm","NodeHtmlMarkdown","a","navigator","clipboard","writeText","document","execCommand","apiKey","onInit","evt","editor","current","onChange","contents","getContent","temp","translate","split","map","str","init","height","menubar","plugins","toolbar","content_style","style","padding","backgroundColor","borderRadius","color","fontSize","lineHeight","border","cursor","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sPAAe,I,4BCsFAA,MAhFf,WACE,IAAMC,EAAYC,iBAAO,MACnBC,EAAe,YACrB,EAAgCC,mBAASD,GAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAAoCF,mBAASD,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACMC,EAAM,IAAIC,mBANH,4CAgBZ,sBAAAC,EAAA,yDACCH,EAAU,yBACN,cAAeI,WAFpB,gCAGgBA,UAAUC,UAAUC,UAAUT,GAH9C,wEAKUU,SAASC,YAAY,QAAQ,EAAMX,IAL7C,4CAhBY,sBAwBb,OACE,qCACE,iCAAQ,oDACR,cAAC,IAAD,CACGY,OAAO,mDACPC,OAAQ,SAACC,EAAKC,GAAN,OAAiBrB,EAAUsB,QAAUD,GAC7CnB,aAAcA,EACdqB,SAxBiB,WACrB,GAAIvB,EAAUsB,QAAS,CACrB,IAAIE,EAAWxB,EAAUsB,QAAQG,aAC7BC,EAAOhB,EAAIiB,UAAUH,GACzBjB,EAAcmB,GACdrB,EAAYqB,EAAKE,MAAM,MAAMC,KAAI,SAAAC,GAAG,OAAI,4BAAIA,QAC5CrB,EAAU,MAmBRsB,KAAM,CACJC,OAAQ,IACRC,SAAS,EACTC,QAAS,CACP,iEACA,6CACA,8DAEFC,QAAS,kKAMTC,cAAe,qEAKnB,sBAAKC,MAAO,CACVC,QAAS,OADX,UAGC,0CACA,wBAAQD,MAAO,CACbE,gBAAiB,UACjBC,aAAc,MACdC,MAAO,OACPC,SAAU,OACVJ,QAAS,WACTK,WAAY,OACZC,OAAQ,OACRC,OAAQ,WAEVC,QAjEO,2CAuDP,kBAJD,OAgBO,gCAAQtC,OAEf,qBAAK6B,MAAO,CACVE,gBAAiB,UACjBE,MAAO,UACPH,QAAS,QAHX,SAKGlC,QCpEK2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAAS2C,eAAe,SAM1BZ,M","file":"static/js/main.1c0d5dcc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React, { useRef, useState } from 'react';\nimport { Editor } from '@tinymce/tinymce-react';\nimport { NodeHtmlMarkdown, NodeHtmlMarkdownOptions } from 'node-html-markdown'\n\nfunction App() {\n  const editorRef = useRef(null);\n  const initialValue = \"Hello ...\";\n  const [markdown, setMarkdown] = useState(initialValue);\n  const [textToCopy, setTextToCopy] = useState(initialValue);\n  const [copied, setCopied] = useState(\"\");\n  const nhm = new NodeHtmlMarkdown();\n   const createMarkdown = () => {\n     if (editorRef.current) {\n       let contents = editorRef.current.getContent();\n       let temp = nhm.translate(contents);\n       setTextToCopy(temp);\n       setMarkdown(temp.split('\\n').map(str => <p>{str}</p>));\n       setCopied(\"\");\n     }\n   };\n   async function copyTextToClipboard() {\n    setCopied(\"Copied to Clipboard\");\n    if ('clipboard' in navigator) {\n      return await navigator.clipboard.writeText(textToCopy);\n    } else {\n      return document.execCommand('copy', true, textToCopy);\n    }\n   }\n  return (\n    <>\n      <center><h1>Markdown Creator</h1></center>\n      <Editor\n         apiKey='umb3l00p36tr88g0cruu9dy8w4l8613hfexy248fvae69lap'\n         onInit={(evt, editor) => editorRef.current = editor}\n         initialValue={initialValue}\n         onChange={createMarkdown}\n         init={{\n           height: 300,\n           menubar: false,\n           plugins: [\n             'advlist autolink lists link image charmap print preview anchor',\n             'searchreplace visualblocks code fullscreen',\n             'insertdatetime media table paste code help wordcount image'\n           ],\n           toolbar: 'undo redo | formatselect | ' +\n           'bold italic | ' +\n           'bullist numlist | ' +\n           'image link | ' +\n           'insertdatetime | ' +\n           'removeformat preview | wordcount paste searchreplace fullscreen | code',\n           content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }'\n         }}\n       />\n\n       \n       <div style={{\n         padding: \"5px\",\n       }}>\n        <h2>Markdown</h2>\n        <button style={{\n          backgroundColor: \"#207ab7\",\n          borderRadius: \"3px\",\n          color: \"#fff\",\n          fontSize: \"14px\",\n          padding: \"4px 16px\",\n          lineHeight: \"24px\",\n          border: \"none\",\n          cursor: \"pointer\"\n        }}\n        onClick={copyTextToClipboard}\n        >Copy</button>\n        &nbsp;<small>{copied}</small>\n       </div>\n       <div style={{\n         backgroundColor: '#1D1F21',\n         color: '#c5c8c6',\n         padding: \"15px\"\n       }}>\n         {markdown}\n       </div>\n       </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}